#!/usr/bin/env bash

if [[ "${PLATFORM}" == "kubernetes" ]]; then
  cli="kubectl"
elif [[ "${PLATFORM}" == "openshift" ]]; then
  cli="oc"
fi

function announce() {
  echo "++++++++++++++++++++++++++++++++++++++"
  echo ""
  echo "$@"
  echo ""
  echo "++++++++++++++++++++++++++++++++++++++"
}

function build_test_runner_image() {
  pushd ..
  docker build --tag $TEST_RUNNER_IMAGE:$CONJUR_NAMESPACE_NAME \
    --file Dockerfile.e2e \
    --build-arg KUBECTL_VERSION=$KUBECTL_VERSION \
    --build-arg OPENSHIFT_CLI_URL=$OPENSHIFT_CLI_URL \
    .
  popd
}

function configure_conjur_cli() {
  cli_pod="$(pod_name "$CONJUR_NAMESPACE_NAME" 'app=conjur-cli')"
  conjur_url="https://conjur-master.$CONJUR_NAMESPACE_NAME.svc.cluster.local/api"
  $cli exec "$cli_pod" -n "$CONJUR_NAMESPACE_NAME" -- sh -c "
    echo y | conjur init -a $CONJUR_ACCOUNT -u $conjur_url --self-signed --force
    conjur login -i admin -p $CONJUR_ADMIN_PASSWORD
  "
}

function conjur_ssl_cert() {
  follower_pod="$(pod_name $CONJUR_NAMESPACE_NAME 'role=follower')"
  $cli exec "$follower_pod" -n "$CONJUR_NAMESPACE_NAME" -- /bin/bash -c "
    cat /opt/conjur/etc/ssl/conjur.pem
  "
}

function repo_root() {
  root_dir="$(git rev-parse --show-superproject-working-tree)"
  if [[ "$root_dir" == "" ]]; then
    root_dir="$(git rev-parse --show-toplevel)"
  fi
  echo "$root_dir"
}

function rotate_host_api_key() {
  local host_id="${1:-}"

  cli_pod="$(pod_name "$CONJUR_NAMESPACE_NAME" 'app=conjur-cli')"
  $cli exec "$cli_pod" -n "$CONJUR_NAMESPACE_NAME" -- sh -c "
    conjur host rotate-api-key --id $CONJUR_ACCOUNT:host:$host_id
  "
}

function pod_name() {
  local namespace="$1"
  local selector="$2"

  pod_name="$(
    $cli get pods \
      --namespace $namespace \
      --selector $selector \
      -o jsonpath='{.items[].metadata.name}'
  )"

  if [[ -z "$pod_name" ]]; then
    echo "Unable to find $selector in namespace $namespace. Exiting."
    $cli describe pods --namespace $namespace
    exit 1
  fi

  echo "$pod_name"
}

function run_docker_cmd() {
  additional_flags="${2:-}"

  if [ "${PLATFORM}" = "kubernetes" ]; then
    additional_env_vars="
      -e GCLOUD_CLUSTER_NAME
      -e GCLOUD_ZONE
      -e GCLOUD_PROJECT_NAME
      -e GCLOUD_SERVICE_KEY=/tmp$GCLOUD_SERVICE_KEY"
    additional_volumes="
      -v $GCLOUD_SERVICE_KEY:/tmp$GCLOUD_SERVICE_KEY
      -v $(echo ~)/.config:/root/.config"
  elif [ "${PLATFORM}" = "openshift" ]; then
    additional_env_vars="
      -e OPENSHIFT_URL
      -e OPENSHIFT_VERSION
      -e OPENSHIFT_USERNAME
      -e OPENSHIFT_PASSWORD"
    additional_volumes=""
   fi

  docker run -i \
    $additional_flags \
    -e APP_NAMESPACE_NAME \
    -e APP_SERVICE_ACCOUNT_NAME \
    -e AUTHENTICATOR_ID \
    -e CONJUR_ACCOUNT \
    -e CONJUR_ADMIN_PASSWORD \
    -e CONJUR_APPLIANCE_IMAGE \
    -e CONJUR_AUTHENTICATORS \
    -e CONJUR_CERTIFICATE \
    -e CONJUR_DEPLOYMENT \
    -e CONJUR_FOLLOWER_COUNT \
    -e CONJUR_HOST_API_KEY \
    -e CONJUR_HOST_ID \
    -e CONJUR_LOG_LEVEL \
    -e CONJUR_NAMESPACE_NAME \
    -e DB_PASSWORD \
    -e DB_PLATFORM \
    -e DB_TABLE \
    -e DB_USERNAME \
    -e DEPLOY_MASTER_CLUSTER \
    -e DEV \
    -e DOCKER_REGISTRY_PATH \
    -e DOCKER_REGISTRY_URL \
    -e ESO_NAMESPACE_NAME \
    -e IMAGE_PULL_SECRET \
    -e LOCAL \
    -e LOCAL_AUTHENTICATOR \
    -e PLATFORM \
    -e PULL_DOCKER_REGISTRY_PATH \
    -e PULL_DOCKER_REGISTRY_URL \
    -e TEST_NAME_PREFIX \
    -e TEST_PLATFORM \
    -e RUN_IN_DOCKER \
    -e SUMMON_ENV \
    -e UNIQUE_TEST_ID \
    $additional_env_vars \
    -v "$(repo_root):/src" \
    -v /var/run/docker.sock:/var/run/docker.sock \
    $additional_volumes \
    -w /src/deploy \
    $TEST_RUNNER_IMAGE:$CONJUR_NAMESPACE_NAME \
    bash -c "
      ./platform_login.sh
      $1
    "
}

function run_interactive_docker_cmd() {
  run_docker_cmd "$1 && bash" "-t"
}

